print (input(" "). upper()[:3])
import math
print (math.pi * (8 / 2) ** 2 * 27)
import math
print (math.ceil(8 * 1000 / (math.pi * (8 / 2) ** 2 * 27)))
answer = input("")
first_letter = answer[0]
everything_else = answer[1:len(answer) - 1]
last_letter = answer[-1]
print (last_letter + everything_else + first_letter)

def yarn_size(stitches):
    SUPER_BULKY_MAX = 11
    BULKY_MAX = 15
    MEDIUM_MAX = 20
    LIGHT_MAX = 22
    LIGHT_OR_FINE_MAX = 24
    FINE_MAX = 26
    SUPER_FINE_MAX = 32
    
    """Determines yarn size given 4 inches of stitches.

       Preconditions:
       stitches: int > 0; 6 <= value <= 32
     
       Parameter:
       stitches: average number of stitches in 4 inches

       Returns: yarn size
    """

    if stitches <= MEDIUM_MAX and 6 <= stitches:
        if stitches <= SUPER_BULKY_MAX:
            return "Super bulky"
        elif stitches <= BULKY_MAX:
            return "Bulky"
        else:
            return "Medium"
    elif stitches <= SUPER_FINE_MAX:
        if stitches <= LIGHT_MAX:
            return "Light"
        elif stitches <= LIGHT_OR_FINE_MAX:
            return "Light or Fine"
        elif stitches <= FINE_MAX:
            return "Fine"
        else:
            return "Super fine"

DOZEN = 12         # number of items in a dozen
BAKERS_DOZEN = 13  # number of items in a baker's dozen
DOZEN_COST = 10    # cost of a dozen
SINGLE_COST = 1    # cost of a single item

def bakers(items):
    """Determines cost of items with baker's dozen discount.

       Preconditions:
       items: int > 0
    
       Parameters:
       items: number of items 
   
       Returns: total cost with discount of 13 for the cost of a dozen
    """   
    ## Determine numbers of groups of 13 and extras
    NUMBER_OF_BAKERS_DOZEN = items // 13
    OTHERS = items % 13
    ## If there are twelve extras, use dozen_cost
    NUMBER_OF_DOZEN = OTHERS // 12
    NUMBER_OF_SINGLE = OTHERS % 12
    ## If there are fewer than twelve extras, use single_cost
    return (NUMBER_OF_BAKERS_DOZEN + NUMBER_OF_DOZEN) * DOZEN_COST + NUMBER_OF_SINGLE * SINGLE_COST

DOZEN = 12         # number of items in a dozen
BAKERS_DOZEN = 13  # number of items in a baker's dozen
DOZEN_COST = 10    # cost of a dozen
SINGLE_COST = 1    # cost of a single item

def bakers(items, DOZEN_COST, SINGLE_COST):
    """Determines cost of items with baker's dozen discount.

       Preconditions:
       items: int > 0
    
       Parameters:
       items: number of items 
   
       Returns: total cost with discount of 13 for the cost of a dozen
    """   
    ## Determine numbers of groups of 13 and extras
    NUMBER_OF_BAKERS_DOZEN = items // 13
    OTHERS = items % 13
    ## If there are twelve extras, use dozen_cost
    NUMBER_OF_DOZEN = OTHERS // 12
    NUMBER_OF_SINGLE = OTHERS % 12
    ## If there are fewer than twelve extras, use single_cost
    return (NUMBER_OF_BAKERS_DOZEN + NUMBER_OF_DOZEN) * DOZEN_COST + NUMBER_OF_SINGLE * SINGLE_COST

def start_with_a(word):
    return word[0] == "a" or word[0] == "A"

def start_with_a(word):
    return type(word) != type(1) and (word[0] == "a" or word[0] == "A")

def order_ands(any):
    return type(any) == type(1) and any + 1 > 5 and any % 2 == 0

def order_ors(any):
    return type(any) != type("") or len(any) < 2 or any[1] == "a"

def even_int(data):
    return type(data) == type(1) and data % 2 == 0

def four_i(data):
    return type(data) == type("") and len(data) > 0 and data[3] == "i"
import math
a = input("")
b = len(a)
first_half = a[0:math.floor(b / 2)].upper()
second_half = a[math.floor(b / 2):b].lower()
print (first_half + second_half)

age = 35
rest_heart = 65
intensity = .7
maximum_heart = 220 - age
heart_rate_reserve = maximum_heart - rest_heart
print (rest_heart + intensity * heart_rate_reserve)

def box_sides(length, width, height):
    Big_side = length * height
    Small_side = width * height
    return 2 * (Big_side + Small_side)

import math
def area_circle(radius):
    return math.pi * radius ** 2
    
def volume_cylinder(diameter):
    return math.pi * (diameter / 2) ** 2 * 2

import math
def upper_lower(plain):
    a = math.ceil(len(plain) /2)
    return plain[:a].upper() + plain[a:].lower()

def meal_bill(food_cost, tip_percentage, tax_percentage):
    return food_cost * (1 + tip_percentage / 100 + tax_percentage / 100)
    
print(ord("6"))

def is_big(number):
    return number >= 100

def is_odd_string(string):
    return len(string) % 2 != 0

def is_adult(age):
    return 21 <= age <= 65

def is_yes(string):
    return string[0] == y or "Y" and string[0].isupper() or string[0].islower()
    
def is_yes(string):
    return string[0].isupper() or string[0].islower and string[0] == ("y" or "Y")

def tester(integer_one,integer_two):
    return integer_one > integer_two and integer_one < 100 and integer_two % 10 == 0

def seatbelt(age,weight,height):
    return age >= 8 or weight >= 36 or height >= 145

def good_string(string):
    return (string[1].isspace() or string[1].isdigit()) and string[0].isalpha()
    print (good_string(acde))

def start_with_a(word):
    return type(word) == type("") and (word[0] == "a" or word[0] == "A")

def order_ors(any):
    return type(any) != type("") or len(any) < 2 or any[1] == "a"

def even_int(integer):
    return type(integer) == type(1) and integer % 2 == 0

def four_i(data):
    return type(data) == type("") and len(data) >= 4 and data[3] == "i"

def bigger(x, y):
    if x < y:
        return y
    else:
        return x

def total_bill(cost, age, tax):
    if age >= 65:
        return (cost * 0.9) * (1 + tax)
    if age < 65:
        return cost * (1 + tax)

def greeting(string):
    if len(string) >= 3 and string[:3] == "Hi!":
        return "Hello"
    else: 
        return "Bye"

def even_int(integer):
    if integer % 2 == 0:
        return "Even"
    else:
        return "Odd"

def even_int(integer):
    if integer % 2 == 0:
        return "Even"
    if integer % 2 == 1:
        return "Odd"

def is_time(x, y):
    if 0 <= x <= 23 and 0 <= y <= 59:
        return "Passes"
    else:
        return "Fails"

def max_of_three(x, y, z):
    if x >= y and x >= z:
        return x
    elif y >= x and y >= z:
        return y
    else:
        return z

def total_bill(cost, age, tax):
    if age >= 65 and cost < 100:
        return cost * 0.9 * (1 + tax) + 5
    elif age >= 65 and cost >= 100:
        return cost * 0.9 * (1 + tax)
    elif cost < 100:
        return cost * (1 + tax) + 5
    else:
        return cost * (1 + tax)
    
def integer_type(value):
    if type(value) == type(1) and value % 2 == 0:
        return "Even integer"
    elif type(value) == type(1) and value % 2 == 1:
        return "Odd integer"
    
    else:
        return "Not an integer"

def off_peak(data):
    if type(data) == type(1) and (0 <= int(data) < 9 or 17 < data <= 23):
        return "Off peak"
    elif type(data) == type(1) and 9 <= int(data) <= 17:
        return "Peak"
    else:
        return "Not a time"
    
def off_peak(data):
    if type(data) == type(1) and (0 <= int(data) < 9 or 17 < data <= 23):
        return "Off peak"
    elif type(data) == type(1) and 9 <= int(data) <= 17:
        return "Peak"
    else:
        return "Not a time"

def is_multiple(number, factor):
    return number % factor == 0
    
def leap_year(x):
    if (x % 4 == 0 and x % 100 == 0 and x % 400 == 0) or (x % 4 == 0 and not x % 100 ==0):
        return "Leap year"
    else:
        return "Common year"

def romanize(x):
    if 1 <= x <= 3:
        return "I" * x
    elif x == 4:
        return "IV"
    elif 5 <= x <= 8:
        return "V" + "I" * (x - 5)
    elif 9 <= x <= 10:
        return "I" * (10 - x) + "X"

def my_function(first, second):
    second = second - first
    third = 10 + (second - first)
    return third

print(my_function(1, 100))

import math
def select_mod(entry, num):
    """Returns the character in entry 
       at position num modulo string length.

       Preconditions:
       entry: string of length > 0
       num: positive integer

       Parameters:
       entry: string containing chosen character
       num: position in the string 

       Return: a single character
    """
    select = int(math.fmod(num, len(entry)))
    return entry[select]

print(select_mod("caterpillar", 13))

def cap_first(entry):
    """Returns string formed from entry 
       with first letter captialized.

       Preconditions:
       entry: string

       Parameter:
       entry: string to be capitalized

       Returns: capitalized string
    """
    if len(entry) == 0:
        return entry
    else:
        return entry[0].upper() + entry[1:]

print(cap_first("capitalize"))

import math
def exchange(entry):
    """Returns string with middle and last
       character exchanged.

       Preconditions:
       entry: string of odd length > 0

       Parameter:
       entry: string as basis for new string

       Returns: string like entry but with
                middle and last positions exchanged
    """
    mid = math.floor(len(entry) / 2)
    first_part = entry[:mid]
    middle_char = entry[mid]
    second_part = entry[mid + 1:mid * 2]
    last_char = entry[mid * 2]
    return first_part + last_char + second_part + middle_char
    
print(exchange("caterpillar"))
print(exchange("cat"))

BULLETS = 351
FINE = 321
BRILLIANT = 291
SUPERIOR = 261
LARGE = 231
EXTRA_LARGE = 201
JUMBO = 181
EXTRA_JUMBO = 161
GIANT = 141
COLOSSAL = 121
SUPER_COLOSSAL = 111
MAMMOTH = 101
SUPER_MAMMOTH = 91

def olive_sizes(number):
    """Returns a string for the type of olive
       given the number per kilogram.

       Preconditions:
       number: integer in range from 91 to 351, inclusive

       Parameter:
       number: number of olives in one kilogram

       Return: a string giving type of olive
    """

    if number < MAMMOTH:
        return "Super Mammoth"
    elif number < SUPER_COLOSSAL:
        return "Mammoth"
    elif number < COLOSSAL:
        return "Super Colossal"
    elif number < GIANT:
        return "Colossal"
    elif number < EXTRA_JUMBO:
        return "Giant"
    elif number < JUMBO:
        return "Extra Jumbo"
    elif number < EXTRA_LARGE:
        return "Jumbo"
    elif number < LARGE:
        return "Extra Large"
    elif number < SUPERIOR:
        return "Large"
    elif number < BRILLIANT:
        return "Superior"
    elif number < FINE:
        return "Brilliant"
    elif number < BULLETS:
        return "Fine"
    else:
        return "Bullets"

print(olive_sizes(191))

def repeat_print(num):
    """Prints the input num times.
 
       Preconditions:
       num: positive integer 
    
       Parameter:
       num: the number of times and what is printed

       Side effect: prints num num times.
    """
    count = num
    while count > 0:
        count = count - 1
        print(num)
        
print(repeat_print(5))

def increase(num):
    """Determines the sum of num down to 1.

       Preconditions:
       num: int > 0

       Parameter:
       num: the starting number

       Returns: sum of num down to 1
    """
    total = num
    while num > 0:
        num = num - 1
        total = total + num
    return total

print(increase(5))
        
    

    

